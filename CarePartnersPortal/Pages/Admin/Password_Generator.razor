@layout MainLayout
@page "/passwordgen"
@using CarePartnersPortal.Classes;

<h3>Password Gen v1.0</h3>
<div>
    <label>Complexity Select</label>
    <select style="width:auto" @onchange="SetComplexity" class="form-control custom-select-sm" id="exampleFormControlSelect1">
        <option value="User">User</option>
        <option value="Admin">Admin</option>
        <option value="Service Account">Service Account</option>
    </select>
</div>
<div>
    <label>Lower Characters: </label>
    @numberOfLowerChar
</div>
<div>
    <label>Upper Characters: </label>
    @numberOfUpperChar
</div>
<div>
    <label>Number Characters: </label>
    @numberOfNumberChar
</div>
<div>
    <label>Special Characters: </label>
    @numberOfSpecialChar
</div>
<div>
    <label>Number of Passwords</label>
    <input type="text" @bind="numberOfPasswords" />
</div>
<button class="btn btn-primary" @onclick="GetPassword">Get Password</button>
<br />
<br />

@if (passwordList != null)
{
    foreach (string password in passwordList)
    {
        @password
        <br />
    }
}


@code {
    private int numberOfLowerChar;
    private int numberOfUpperChar;
    private int numberOfNumberChar;
    private int numberOfSpecialChar;
    private string complexity;
    private string password;
    private int numberOfPasswords = 1;
    private List<string> passwordList = new List<string>();
    private static string specialChar = "!#$%&*@";
    private static string numbers = "123456789";
    private static string lowerChar = "abcdefghjkmnpqrstuvwxyz";
    private static string uppperchar = lowerChar.ToUpper();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            complexity = "User";
            AdjustComplexityValues();
            StateHasChanged();
        }
    }

    Random rng = new Random();
    protected void GetPassword()
    {
        passwordList.Clear();

        for (int i = 1; i <= numberOfPasswords; i++)
        {


            //password = GeneratePassword();
            password = Password.New(numberOfUpperChar, numberOfLowerChar, numberOfNumberChar, numberOfSpecialChar);
            passwordList.Add(password);
        }
    }
    protected string CheckPassword(string pass)
    {
        for (int i = 1; i < pass.Length; i++)
        {
            if (i != pass.Length - 1)
            {
                if (pass[i] == pass[i + 1])
                {
                    password = GeneratePassword();
                }
            }
        }
        return password;
    }

    protected void SetComplexity(ChangeEventArgs e)
    {
        complexity = e.Value.ToString();
        AdjustComplexityValues();
    }
    protected void AdjustComplexityValues()
    {

        if (complexity == "User")
        {
            numberOfLowerChar = 2;
            numberOfUpperChar = 2;
            numberOfNumberChar = 2;
            numberOfSpecialChar = 2;
        }
        if (complexity == "Admin")
        {
            numberOfLowerChar = 3;
            numberOfUpperChar = 3;
            numberOfNumberChar = 2;
            numberOfSpecialChar = 2;
        }
        if (complexity == "Service Account")
        {
            numberOfLowerChar = 4;
            numberOfUpperChar = 4;
            numberOfNumberChar = 4;
            numberOfSpecialChar = 4;
        }
        StateHasChanged();
    }

    protected string GeneratePassword()
    {
        password = "";
        GetUpper(numberOfUpperChar);
        GetLower(numberOfLowerChar);
        GetNumber(numberOfNumberChar);
        GetSpecial(numberOfSpecialChar);
        CheckPassword(password);
        return password;

    }

    protected void GetLower(int howManyRequired)
    {
        for (int i = 1; i <= howManyRequired; i++)
        {
            password = password.Insert(rng.Next(password.Length + 1), lowerChar[rng.Next(0, lowerChar.Length - 1)].ToString());
        }
    }
    protected void GetUpper(int howManyRequired)
    {
        for (int i = 1; i <= howManyRequired; i++)
        {
            password = password.Insert(rng.Next(password.Length + 1), uppperchar[rng.Next(0, uppperchar.Length - 1)].ToString());
        }
    }
    protected void GetNumber(int howManyRequired)
    {
        for (int i = 1; i <= howManyRequired; i++)
        {
            password = password.Insert(rng.Next(password.Length + 1), numbers[rng.Next(0, numbers.Length - 1)].ToString());
        }
    }
    protected void GetSpecial(int howManyRequired)
    {
        for (int i = 1; i <= howManyRequired; i++)
        {
            password = password.Insert(rng.Next(password.Length + 1), specialChar[rng.Next(0, specialChar.Length - 1)].ToString());
        }
    }
}


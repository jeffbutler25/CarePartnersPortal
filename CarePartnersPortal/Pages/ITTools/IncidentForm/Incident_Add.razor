@page "/outagenotification"
@page "/outagenotification/{Task}/{ID}"
@attribute [Authorize(Policy = "Admin")]
<h3>IT Outage</h3>
@inject DBContext db
<EditForm Model="outage" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <br />
    <h4 style="text-align:center">Select Impacted Systems</h4>
    <div class="" style="">
        <div class="row">
            <div class="col" style="outline: double">
                <p style="text-align:center"><b>Impacted Systems List</b></p>
                @foreach (ITSystem system in itSystemsImpacted)
                {
                    <button class="btn btn-danger" style="margin:5px" @onclick="() => RemoveImpactedSystem(system)">@system.Name</button>
                }
            </div>
            <div class="col-1">
            </div>
            <div class="col" style="outline: double">
                <p style="text-align:center"><b>Systems List</b></p>
                @foreach (ITSystem system in itSystems)
                {
                    <button class="btn btn-outline-secondary" style="margin:5px" @onclick="() => AddImpactedSystem(system)">  @system.Name  </button>
                }
            </div>
        </div>
    </div>
    <br />

    <h4 style="text-align:center">Select Impacted Users</h4>
    <div class="" style="">
        <div class="row">
            <div class="col" style="outline: double">
                <p style="text-align:center"><b>Impacted Users</b></p>
                @foreach (Region region in impactedRegions)
                {
                    <button class="btn btn-danger" style="margin:5px" @onclick="() => RemoveImpactedUsers(region)">@region.Name</button>
                }
            </div>
            <div class="col-1">
            </div>
            <div class="col" style="outline: double">
                <p style="text-align:center"><b>User Groups</b></p>
                @foreach (Region region in regions)
                {
                    <button class="btn btn-outline-secondary" style="margin:5px" @onclick="() => AddImpactedUsers(region)">@region.Name</button>
                }
            </div>

        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-5">
            <div class="form-group">
                <label style="text-align:right">Outage Type:</label><br />
                <InputSelect class="form-control" @bind-Value="outage.IncidentType">
                    <option value="Scheduled Maintenance">Scheduled Maintenance</option>,
                    <option value="Outage">Outage</option>
                </InputSelect>
            </div>
            <div class=" form-group">
            <label style="text-align:right">Notification Type:</label><br />
            <InputSelect class="form-control" @bind-Value="outage.NotificaitonType">
                <option value="Office Staff Only">Office Staff Only</option>,
                <option value="FrontLine and Office Staff">FrontLine and Office Staff</option>
            </InputSelect>
            </div>
            <div class="form-group">
                <label style="text-align:right">Start:</label><br />
                <InputText class="form-control" @bind-Value="outage.OutageStart" />
            </div>

            <div class="form-group">
                <label style="text-align:right">End:</label><br />
                <InputText class="form-control" @bind-Value="outage.OutageEnd" />
            </div>

            <div class="form-group">
                <label style="text-align:right">Details:</label><br />
                <InputTextArea class="form-control" @bind-Value="outage.Details" />
            </div>

        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public string ID { get; set; }
    [Parameter]
    public string Task { get; set; }

    ITOutage outage = new ITOutage();
    Email notification = new Email();
    List<ITSystem> itSystems = new List<ITSystem>();
    List<ITSystem> itSystemsImpacted = new List<ITSystem>();
    List<Region> regions = new List<Region>();
    List<Region> impactedRegions = new List<Region>();

    private bool test = false;
    protected override void OnInitialized()
    {

    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            GetInfoFromDB();
            if (Task == null)
            {
                outage = db.ITOutages.Single(x => x.ID == Int32.Parse(ID));

                
            }
            if (Task == "Edit")
            {
                if(ID != null)
                {

                }
            }
            StateHasChanged();
        }
    }

    protected void HandleValidSubmit()
    {
        AddOutage();
    }

    protected void AddOutage()
    {
        foreach(Region region in impactedRegions)
        {
            if (outage.NotificaitonType == "Office Staff Only" )
            {
                outage.ImpactedUsers = region.OfficeStaffDL + ",";
            }
            if (outage.NotificaitonType == "FrontLine and Office Staff")
            {
                outage.ImpactedUsers += region.OfficeStaffDL + ",";
                outage.ImpactedUsers += region.FrontlineStaffDL + ",";
            }
        }
        outage.ImpactedUsers = outage.ImpactedUsers.TrimEnd(',');
        foreach (ITSystem system in itSystemsImpacted)
        {
            outage.ImpactedSystems += system.Name + ",";
        }
        outage.ImpactedSystems = outage.ImpactedSystems.TrimEnd(',');
        outage.Status = "Created";
        db.ITOutages.Add(outage);
        db.SaveChanges();
    }

    protected void GetInfoFromDB()
    {
        itSystems = db.ITSystems.OrderBy(o => o.Name).ToList();
        regions = db.Regions.OrderBy(o => o.Name).ToList();
    }

    protected void AddImpactedSystem(ITSystem system)
    {
        itSystems.Remove(system);
        itSystemsImpacted.Add(system);
    }

    protected void RemoveImpactedSystem(ITSystem system)
    {
        itSystems.Add(system);
        itSystemsImpacted.Remove(system);
    }

    protected void AddImpactedUsers(Region group)
    {
        regions.Remove(group);
        impactedRegions.Add(group);
    }

    protected void RemoveImpactedUsers(Region group)
    {
        regions.Add(group);
        impactedRegions.Remove(group);
    }
}

